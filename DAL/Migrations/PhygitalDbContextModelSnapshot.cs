// <auto-generated />
using System;
using System.Collections.Generic;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(PhygitalDbContext))]
    partial class PhygitalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BL.Domain.Answers.MultipleChoiceAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<List<string>>("SelectedOptions")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("MultipleChoiceAnswers");
                });

            modelBuilder.Entity("BL.Domain.Answers.OpenAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("OpenAnswers");
                });

            modelBuilder.Entity("BL.Domain.Answers.RangeAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("SelectedValue")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("RangeAnswers");
                });

            modelBuilder.Entity("BL.Domain.Answers.SingleChoiceAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("SelectedOption")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("SingleChoiceAnswers");
                });

            modelBuilder.Entity("BL.Domain.Flow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("ParentFlowId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentFlowId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Flows");
                });

            modelBuilder.Entity("BL.Domain.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("BL.Domain.Questions.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FlowId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FlowId");

                    b.ToTable("Question");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Question");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BL.Domain.Questions.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("BL.Domain.Questions.Question");

                    b.Property<List<string>>("Options")
                        .HasColumnType("text[]");

                    b.HasDiscriminator().HasValue("MultipleChoiceQuestion");
                });

            modelBuilder.Entity("BL.Domain.Questions.OpenQuestion", b =>
                {
                    b.HasBaseType("BL.Domain.Questions.Question");

                    b.HasDiscriminator().HasValue("OpenQuestion");
                });

            modelBuilder.Entity("BL.Domain.Questions.RangeQuestion", b =>
                {
                    b.HasBaseType("BL.Domain.Questions.Question");

                    b.Property<int>("Max")
                        .HasColumnType("integer");

                    b.Property<int>("Min")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("RangeQuestion");
                });

            modelBuilder.Entity("BL.Domain.Questions.SingleChoiceQuestion", b =>
                {
                    b.HasBaseType("BL.Domain.Questions.Question");

                    b.Property<List<string>>("Options")
                        .HasColumnType("text[]");

                    b.ToTable("Question", t =>
                        {
                            t.Property("Options")
                                .HasColumnName("SingleChoiceQuestion_Options");
                        });

                    b.HasDiscriminator().HasValue("SingleChoiceQuestion");
                });

            modelBuilder.Entity("BL.Domain.Answers.MultipleChoiceAnswer", b =>
                {
                    b.HasOne("BL.Domain.Questions.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BL.Domain.Answers.OpenAnswer", b =>
                {
                    b.HasOne("BL.Domain.Questions.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BL.Domain.Answers.RangeAnswer", b =>
                {
                    b.HasOne("BL.Domain.Questions.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BL.Domain.Answers.SingleChoiceAnswer", b =>
                {
                    b.HasOne("BL.Domain.Questions.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BL.Domain.Flow", b =>
                {
                    b.HasOne("BL.Domain.Flow", "ParentFlow")
                        .WithMany("SubFlows")
                        .HasForeignKey("ParentFlowId");

                    b.HasOne("BL.Domain.Project", "Project")
                        .WithMany("Flows")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentFlow");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("BL.Domain.Questions.Question", b =>
                {
                    b.HasOne("BL.Domain.Flow", null)
                        .WithMany("Questions")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BL.Domain.Flow", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("SubFlows");
                });

            modelBuilder.Entity("BL.Domain.Project", b =>
                {
                    b.Navigation("Flows");
                });
#pragma warning restore 612, 618
        }
    }
}
